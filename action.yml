name: 'URLWatch Website Change Detector'
description: 'Monitor web pages for changes using urlwatch with GitHub Actions'
inputs:
  config-dir:
    description: 'Path to directory containing urlwatch configuration files'
    required: false
    default: '.github/urlwatch'
  cache-name:
    description: 'Name for the cache persistence artifact'
    required: false
    default: 'urlwatch-cache'
  create-issues:
    description: 'Create GitHub issues when changes are detected'
    required: false
    default: 'true'
  issue-header:
    description: 'Title template for created issues'
    required: false
    default: 'Website changes detected üåê'
  issue-tags:
    description: 'Comma-separated list of issue labels'
    required: false
    default: 'monitoring,update'
  token:
    description: 'A github token'
    required: true
outputs:
  changes:
    description: 'Raw output of detected changes from urlwatch'
  report:
    description: 'Formatted markdown report of changes'
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Install urlwatch
      run: pip install urlwatch
      shell: bash

    - name: Configure urlwatch
      run: |
        mkdir -p ~/.config/urlwatch ~/.cache/urlwatch
        cp -r "${{ inputs.config-dir }}"/* ~/.config/urlwatch/
      shell: bash

    - name: Find previous cache
      id: last-run
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      continue-on-error: true
      with:
        script: |
          const path = require('path');

          const workflowRef = process.env.GITHUB_WORKFLOW_REF;
          const filePath = workflowRef.split('@')[0];
          const workflow_id = path.basename(filePath);

          // Fetch the most recent successful workflow run for this workflow file
          const response = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id,
            status: 'success',
            per_page: 1
          });

          // Set the output to the run ID, or 0 if not found
          core.setOutput('run_id', response.data.workflow_runs[0]?.id || 0);

    - name: Restore urlwatch cache
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: ${{ inputs.cache-name }}
        github-token: ${{ inputs.token }}
        run-id: ${{ steps.last-run.outputs.run_id }}
      if: ${{ steps.last-run.outputs.run_id != 0 }}

    - name: Execute monitoring
      id: urlwatch-exec
      run: |
        # Move downloaded cache if exists
        if [[ -f cache.db ]]; then
          mv cache.db ~/.cache/urlwatch/
        fi
        
        output=$(urlwatch)
        echo "changes<<EOF" >> $GITHUB_OUTPUT
        echo "$output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "report<<EOF" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "$output" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash

    - name: Preserve new cache state
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
      with:
        name: ${{ inputs.cache-name }}
        path: ~/.cache/urlwatch/cache.db

    - name: Create change notification
      if: ${{ inputs.create-issues == 'true' && steps.urlwatch-exec.outputs.changes != '' }}
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        DETECTED_CHANGES: ${{ steps.urlwatch-exec.outputs.report }}
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '${{ inputs.issue-header }}',
            body: process.env.DETECTED_CHANGES,
            labels: '${{ inputs.issue-tags }}'.split(',')
          });
